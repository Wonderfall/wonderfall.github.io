<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on Wonder&#39;s Lab</title>
    <link>https://wonderfall.dev/tags/linux/</link>
    <description>Recent content in linux on Wonder&#39;s Lab</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Apr 2022 17:43:12 +0000</lastBuildDate><atom:link href="https://wonderfall.dev/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Securing OpenSSH keys with hardware-based authentication (FIDO2)</title>
      <link>https://wonderfall.dev/openssh-fido2/</link>
      <pubDate>Sat, 09 Apr 2022 17:43:12 +0000</pubDate>
      
      <guid>https://wonderfall.dev/openssh-fido2/</guid>
      <description>Passwordless authentication with OpenSSH keys has been the de facto security standard for years. SSH keys are more robust since they&amp;rsquo;re cryptographically sane by default, and are therefore resilient to most bruteforce atacks. They&amp;rsquo;re also easier to manage while enabling a form of decentralized authentication (it&amp;rsquo;s easy to painlessly revoke them). So, what&amp;rsquo;s the next step? And more exactly, why would one need something even better?
The main problem with SSH keys is that they&amp;rsquo;re not magic: they consist of a key pair, of which the private key is stored on your disk.</description>
    </item>
    
    <item>
      <title>Docker &amp; OCI: a humble hardening guide</title>
      <link>https://wonderfall.dev/docker-hardening/</link>
      <pubDate>Wed, 30 Mar 2022 21:23:12 +0000</pubDate>
      
      <guid>https://wonderfall.dev/docker-hardening/</guid>
      <description>Containers aren&amp;rsquo;t that new fancy thing anymore, but they were a big deal. And they still are. They are a concrete solution to the following problem:
 - Hey, your software doesn&amp;rsquo;t work&amp;hellip;
- Sorry, it works on my computer! Can&amp;rsquo;t help you.
 Whether we like them or not, containers are here to stay. Their expressiveness and semantics allow for an abstraction of the OS dependencies that a software has, the latter being often dynamically linked against certain libraries.</description>
    </item>
    
  </channel>
</rss>
